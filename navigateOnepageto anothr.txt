import 'package:flutter/material.dart';
import 'package:navigationdrawer/main.dart';

class Page1 extends StatelessWidget {
  const Page1({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title:"Page1",
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(
        title:"Flutter demo Home page",
      ),
    );
  }
}
class MyHomePage1 extends StatefulWidget {
  const MyHomePage1({super.key});

  @override
  State<MyHomePage1> createState() => _MyHomePage1State();
}

class _MyHomePage1State extends State<MyHomePage1> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text("Page1 title"),
      ),
      body: Center(
        child: Text("Page1"),
      ),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.add),
        tooltip: "Go home",
        onPressed: (){
          Navigator.push(context, MaterialPageRoute(builder: (context)=>MyApp()));
        },
      ),
    );
  }
}




------------------------------------------------------------making a extra page start  ----------------------------------------------------
import 'package:http/http.dart' as http;

import 'package:flutter/material.dart';


class Getdata extends StatelessWidget {
  const Getdata({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title:"Page1",
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage1(
        // title:"Flutter demo Home page",
      ),
    );
  }
}
class MyHomePage1 extends StatefulWidget {
  const MyHomePage1({super.key});

  @override
  State<MyHomePage1> createState() => _MyHomePage1State();
}

class _MyHomePage1State extends State<MyHomePage1> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text("Page1 title"),
      ),
      body: Center(
        child: Text("Page1"),
      ),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.add),
        tooltip: "Get Data",
        onPressed: (){
          // Navigator.push(context, MaterialPageRoute(builder: (context)=>MyApp()));
        },
      ),
    );
  }
}
------------------------------------------------------------making a extra page end  ----------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------

.............................................................Flutter post data to spring to database .................................................................




--------------------------------------------------sign up . dart-------------------------------------------------------------------


import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import 'package:practice_3_2/main.dart';

List <Student> objectsFromJson (String str)=> List<Student>.from(json.decode(str).map((x)=> Student.fromJson (x)));


String objectsToJson (List<Student> data ) => json.encode(List<Student>.from(data.map((x)=>x.toJson())));

class Student {
  int? id;
  String? name;
  String? email;
  String? round;

  Student ({ this.id,  this.name , this.email, this.round});
  factory Student.fromJson(Map<String, dynamic> json) => Student(id:json['id'], name: json['name'], email: json ['email'], round:json ['round']);

  Map<String, dynamic> toJson (){
    return {
      "id": id,
      "name": name,
      "email":email,
      "round":round
    };
  }
}
class Signup extends StatefulWidget{
  Signup({ super.key});

  State<Signup> createState ()=> _SignUp();
}

class _SignUp extends State<Signup>{
  TextEditingController _id=TextEditingController();
  TextEditingController _name=TextEditingController();
  TextEditingController _email=TextEditingController();
  TextEditingController _round=TextEditingController();

  Future<Student> signupStudent() async{
    Student s = Student(id: int.parse(_id.text) , name:_name.text,email:_email.text, round:_round.text, );
    final response= await http.post(
      Uri.parse('http://192.168.0.116:8080/insert'),
      body:jsonEncode(s.toJson()),
      headers: {'Content-Type':'application/json',},
    );

    if(response.statusCode== 200){
      return Student.fromJson(json.decode(response.body));
    }else{
      throw Exception("error");
    }
  }
  
  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    
    return Scaffold(

      appBar: AppBar(
        title: Text("Sign up"),
      ),
      body: Form(
        child: Padding(
          padding: EdgeInsets.all(10),
          child: ListView(
            children:<Widget> [
              Padding(padding: EdgeInsets.all((5),


              ),
              child: TextFormField(
                controller: _id,
                decoration:  InputDecoration(
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                  labelText: "Id",
                ),
              )
                ,),

              Padding(padding: EdgeInsets.all((5),


              ),
                child: TextFormField(
                  controller: _name,
                  decoration:  InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    labelText: "name",
                  ),
                )
                ,)


              , Padding(padding: EdgeInsets.all((5),


              ),
                child: TextFormField(
                  controller: _email,
                  decoration:  InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    labelText: "email",
                  ),
                )
                ,)


              ,


              Padding(padding: EdgeInsets.all((5),


              ),
                child: TextFormField(
                  controller: _round,
                  decoration:  InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    labelText: "round",
                  ),
                )
                ,),



              ElevatedButton(onPressed: () async {
                Student st = await signupStudent();
                if(st!= null){
                  print(_id.text);
                  ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text("Enter")
                      )
                  );

                  Navigator.push(context, MaterialPageRoute(builder: (context) => MyApp()));
                }else if( _id.toString() == 0){
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Hello, Snackbar!'),
                    ),
                  );
                }

                if(_id.text.length == 0){
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Hello, Error!'),
                    ),
                  );
                }
              }, child: Text("Submit"))
            ],
          ),
        ),
      ) ,
    );
  }


}






--------------------------------------------------myapp . dart-------------------------------------------------------------------




import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:practice_3_2/Getdata.dart';
import 'package:practice_3_2/Signup.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(

        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});


  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {

      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(

        backgroundColor: Theme.of(context).colorScheme.inversePrimary,

        title: Text(widget.title),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          Container(
            width: 150,
            height: 150,
            decoration:   const BoxDecoration(
              image: DecorationImage(
                image: AssetImage("images/Flutter.png"),
                  fit: BoxFit.fill
              ),
            ),
            
            child: const Center(
              child: Icon(Icons.play_circle_fill,color: Colors.green, size: 60,),
            ),
          ),


          const Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              ListTile(
                title: Text("Flutter full Course"),
                subtitle: Text("Created by dear Programmer \n55 videos"),
              ),
            ],
          ),

          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              Padding(padding: const EdgeInsets.fromLTRB(0, 20, 0, 20),
                child:  ElevatedButton(
                  onPressed: () {  },
                  child: const Text('Raised Button'),

                ),
              ),

              Padding(padding: const EdgeInsets.fromLTRB(0, 10, 0, 0),
                child:  ElevatedButton(
                  onPressed: () {
                    Navigator.push(context, MaterialPageRoute(builder: (context) => Signup() ));
                  },
                  child: const Text('Get Data'),

                ),
              ),

            ],
          ),

          const Card(
            child: ListTile(
              leading: Icon(Icons.play_circle_fill_rounded),
              title: Text("one line"),
              subtitle: Text("20 min 34 sec"),
            ),
          ),


          const Card(
            child: ListTile(
              leading: Icon(Icons.play_circle_fill_rounded),
              title: Text("one line"),
              subtitle: Text("20 min 34 sec"),
            ),
          ),

          const Card(
            child: ListTile(
              leading: Icon(Icons.play_circle_fill_rounded),
              title: Text("one line"),
              subtitle: Text("20 min 34 sec"),
            ),
          ),

        ],
      )


      // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}






------------------------------------------------get data  start --------------------------------------------------------------------------------

------------
-------------------------------------------------Fetch Data start--------------------------------------------------------------------
import "dart:core";
import "dart:core";

import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;


List<Student> objectsFromJson(String str)=>List<Student>.from(json.decode(str).map((x)=> Student.fromJson(x)));
String objectsToJson(List<Student> data)=>json.encode(List<Student>.from(data).map((x)=>x.toJson()));

class Student{

  int? id;
  String? name;
  String? email;
  String? round;

  Student({required this.id, required this.name, required this.email, required this.round});
  factory Student.fromJson(Map<String,dynamic> json) => Student(id:json['id'], name: json['name'], email: json['email'], round: json['round']);
  Map<String,dynamic> toJson(){

    return{
      "id":id,
      "name":name,
      "email":email,
      "round":round
    };

  }

}

main(){
  runApp(MaterialApp(
    home:Showall() ,
  ),
  );
}

class Showall extends StatefulWidget {
  const Showall({super.key});

  @override
  State<Showall> createState() => _ShowallState();
}

class _ShowallState extends State<Showall> {

  late List<Student> _students=[];
  Future<List<Student>> showall() async {
    final response=await http.get(
      Uri.parse('http://192.168.0.116:8080/students'),

    );
    if(response.statusCode==200){
      return objectsFromJson(response.body);
    }else{
      throw Exception("Failed");
    }
  }

  @override
  void initState() {
    showall();
    // TODO: implement initState
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ListView(
        children: [
          Container(
            height: 400,
            child: FutureBuilder<List<Student>>(
              future:showall(),
              builder:(context,snapshot){
                if(snapshot.hasData){
                  return ListView.builder(
                    itemCount:snapshot.data!.length,
                    itemBuilder: (context,index){
                      return ListTile(
                        title: Text(snapshot.data![index].id.toString()),
                        leading: Text(snapshot.data![index].name.toString()),
                      );
                    },
                  );
                }else if(snapshot.hasError){
                  return Text("Error");
                }else{
                  return CircularProgressIndicator();
                }
              },
            ),
          ),
        ],
      ),
    );
  }
}







------------------------------------------------get data.dart end---------------------------------------------------------------------------


---------------------------------------------get data.dart second method to get data start ------------------------------------------

import "dart:core";


import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;


List<Student> objectsFromJson(String str)=>List<Student>.from(json.decode(str).map((x)=> Student.fromJson(x)));
String objectsToJson(List<Student> data)=>json.encode(List<Student>.from(data).map((x)=>x.toJson()));

class Student{

  int? id;
  String? name;
  String? email;
  String? round;

  Student({required this.id, required this.name, required this.email, required this.round});
  factory Student.fromJson(Map<String,dynamic> json) => Student(id:json['id'], name: json['name'], email: json['email'], round: json['round']);
  Map<String,dynamic> toJson(){

    return{
      "id":id,
      "name":name,
      "email":email,
      "round":round
    };

  }

}

// main(){
//   runApp(MaterialApp(
//     home:Showall() ,
//   ),
//   );
// }

class Showall extends StatefulWidget {
  const Showall({super.key});

  @override
  State<Showall> createState() => _ShowallState();
}

class _ShowallState extends State<Showall> {

  late List<Student> _students=[];
  Future<List<Student>> showall() async {
    final response=await http.get(
      Uri.parse('http://192.168.0.116:8080/students'),

    );
    if(response.statusCode==200){
      return objectsFromJson(response.body);
    }else{
      throw Exception("Failed");
    }
  }

  // @override
  // void initState() {
  //   showall();
  //   // TODO: implement initState
  //   super.initState();
  // }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ListView(
        children: [
          Container(
            height: 400,
            child: FutureBuilder<List<Student>>(
              future:showall(),
              builder:(context,snapshot){
                _students=snapshot.data!;

                if(snapshot.hasData){
                  return ListView.builder(
                    itemCount:_students.length,
                    itemBuilder: (context,index){



                      return ListTile(
                        title:  Text(_students[index].id.toString()),
                        subtitle: Text(_students[index].email.toString()),
                        trailing: Text(_students[index].name.toString()),
                        // title: Text(snapshot.data![index].id.toString()),
                        leading: Text(_students[index].round.toString()),
                      );
                    },
                  );
                }else if(snapshot.hasError){
                  return Text("Error");
                }else{
                  return CircularProgressIndicator();
                }
              },
            ),
          ),
        ],
      ),
    );
  }
}






---------------------------------------------get data.dart second method to get data start ------------------------------------------
------------------------------------------------get data  end--------------------------------------------------------------------------------



------------------------------------------------get data spring controller start------------------------------------------------------------


package com.example.demo;

import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@CrossOrigin("*")
public class Controller {

	public Controller() {
		// TODO Auto-generated constructor stub
	}
	
	
//	@PostMapping("/insert")
//	public void saveStudent(@RequestBody Student s) {
//		StudentDAO dao=new StudentDAO();
//		System.out.println(s);
//		dao.saveStudent(s);
//	}
	
	 @PostMapping(value="/signin")
	  public Student signinStudent(@RequestBody Student s) {
		 StudentDAO d = new StudentDAO();
	    Student st=d.studentSigninById(s.id);
	    return st;
	  }

	  @PostMapping(value="/insert")
	  public Student insertStudent(@RequestBody Student s) {
		  StudentDAO d = new StudentDAO();
	    Student st=d.insert(s);
	    return st;
	  }

	  @GetMapping(value="/students")
	  public List<Student> allstudent(){
		  StudentDAO d = new StudentDAO();
	    List<Student> stlist=new ArrayList<>();
	    stlist=d.allstudent();
	    return stlist;
	  }

}

------------------------------------------------get data spring controller end---------------------------------------------------------




-------------------------------------------------------------------get data spring dao start ----------------------------------------------------


package com.example.demo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class StudentDAO {
	  PreparedStatement pstmt;
	  Connection con;
	public StudentDAO() {
		// TODO Auto-generated constructor stub
	}
	
	public void saveStudent(Student s) {
		
		try {
			Connection con=DriverManager.getConnection(  
					"jdbc:mysql://localhost:3306/flutter","root","root");  
		
					PreparedStatement stm=con.prepareStatement("insert into student values (?,?,?,?)"); 
					stm.setInt(1, s.getId());
					stm.setString(2, s.getName());
					stm.setString(3, s.getEmail());
					stm.setString(4, s.getRound());
					stm.executeUpdate();
					con.close();
		
		}catch(Exception e) {
			System.out.println(e);
		}
	}
	
	

	  public Student insert(Student p) {
	    try {
	      Class.forName("com.mysql.cj.jdbc.Driver");
	      con = DriverManager.getConnection("jdbc:mysql://localhost:3306/flutter", "root", "root");
	      pstmt = con.prepareStatement("insert into student values(?,?,?,?)");
	      pstmt.setInt(1, p.id);
	      pstmt.setString(2, p.name);
	      pstmt.setString(3, p.email);
	      pstmt.setString(4, p.round);
	      int n = pstmt.executeUpdate();

	      con.close();
	    } catch (SQLException | ClassNotFoundException e) {
	    e.printStackTrace();
	    }
	    return p;
	  }



	  public Student studentSigninById(int id) {
	    Student s = new Student();
	    try {
	      Class.forName("com.mysql.cj.jdbc.Driver");
	      con = DriverManager.getConnection("jdbc:mysql://localhost:3306/flutter", "root", "root");
	      pstmt = con.prepareStatement("select * from student where id=" + id);
	      ResultSet rs = pstmt.executeQuery();
	      while (rs.next()) {
	        s = new Student(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4));
	      }

	      con.close();
	    } catch (SQLException | ClassNotFoundException e) {
	    e.printStackTrace();
	    }
	    return s;
	  }

	  public List<Student> allstudent() {
	    List<Student> stlist = new ArrayList<>();
	    try {
	      Class.forName("com.mysql.cj.jdbc.Driver");
	      con = DriverManager.getConnection("jdbc:mysql://localhost:3306/flutter", "root", "root");
	      pstmt = con.prepareStatement("select * from student");
	      ResultSet rs = pstmt.executeQuery();
	      while (rs.next()) {
	        stlist.add(new Student(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4)));
	      }

	      con.close();
	    } catch (SQLException | ClassNotFoundException e) {
	    e.printStackTrace();
	    }
	    return stlist;
	  }

}

-------------------------------------------------------------------get data spring dao end----------------------------------------------------


----------------------------------------------------------------search by id searchbyid.dart start----------------------------------------------------------------------


import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';


import 'FetchData.dart';


List<Student> objectsFromJson(String str) =>
    List<Student>.from(json.decode(str).map((x) => Student.fromJson(x)));
String objectsToJson(List<Student> data) =>
    json.encode(List<Student>.from(data).map((x) => x.toJson()));




class Searchid extends StatefulWidget {
  const Searchid({super.key});

  @override
  State<Searchid> createState() => _SearchidState();
}

class _SearchidState extends State<Searchid> {
  TextEditingController _id = TextEditingController();
  String searchid = "";
  late List<Student> _students = [];

  Future<List<Student>> showall() async {
    final response = await http.get(
      Uri.parse('http://192.168.0.116:8080/students'),
    );
    if (response.statusCode == 200) {
      return objectsFromJson(response.body);
    } else {
      throw Exception("Failed");
    }
  }

  void show()async{
    _students = await showall();
  }

  Future<List<Student>> showallbyid(String id) async {
    var response;

    if(id.length == 0 ){
      response = await http.get(
        Uri.parse('http://192.168.0.116:8080/students'),
      );
    }else{
      response = await http.get(
        Uri.parse('http://192.168.0.116:8080/search/'+id),
      );
    }

    if (response.statusCode == 200) {
      return objectsFromJson(response.body);
    } else {
      throw Exception("Failed");
    }
  }

  void showbyid()async{
    _students = await showallbyid(_id.text);
    setState(() {

    });
  }

  @override
  void initState() {
    // TODO: implement initState
    show();
    super.initState();
  }



  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Search By Id"),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          Container(
            child: Form(
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Expanded(
                    flex: 2,
                    child: TextFormField(
                      controller: _id,
                      validator: (String? value) {
                        if (value!.isEmpty) {
                          return 'please enter id';
                        }
                      },
                      decoration: InputDecoration(
                          labelText: 'id',
                          //hintText: 'Enter id',
                          border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(5.0))),
                    ),
                  ),
                  Expanded(
                    flex: 1,
                    child: Padding(
                      padding: const EdgeInsets.fromLTRB(10, 0, 10, 0),
                      child: ElevatedButton(
                        onPressed: () {
                          if (_id.text.length == 0) {
                            showall();
                          } else {
                            searchid = _id.text;
                          }
                          showbyid();

                          setState(() {});
                        },
                        child: Text("Search"),
                        style: ButtonStyle(
                          shape: WidgetStateProperty.all(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(5),
                              side: BorderSide(color: Colors.red),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),

          SizedBox(
            height: 200,
            child: FutureBuilder<List<Student>>(
              future: showallbyid(_id.text),
              builder: (context, snapshot){
                if(snapshot.hasData){
                  return ListView.builder(
                    itemCount: snapshot.data!.length,
                    itemBuilder: (context, index){
                      return ListTile(
                        leading: Text(snapshot.data![index].id.toString()),
                        title: Text(snapshot.data![index].name.toString()),
                      );


                    },);

                }else if(snapshot.hasError){
                  return Text("Error");
                }else{
                  return CircularProgressIndicator();
                }
              },
            ),
          ),
        ],
      ),
    );
  }
}


----------------------------------------------------------------search by id searchbyid.dart end---------------------------------------------------------------------------


----------------------------------------------------------------controller spring  start -------------------------------------------------------------------------
	  List<Student> stlist=new ArrayList<>();
@GetMapping(value="/search/{id}")
	public List<Student> search(@PathVariable("id") int id){
	StudentDAO d = new StudentDAO();
		stlist = d.studentbyid(id);
		
		return stlist;
	}


----------------------------------------------------------------controller spring  end-------------------------------------------------------------------------



----------------------------------------------------------------dao start  ---------------------------------------------------------------------------------
 public List<Student> studentbyid(int id) {
			List<Student> stlist = new ArrayList<>();
			try {
				Class.forName("com.mysql.cj.jdbc.Driver");
				con = DriverManager.getConnection("jdbc:mysql://localhost:3306/flutter", "root", "root");
				pstmt = con.prepareStatement("select * from student where id=" + id);
				ResultSet rs = pstmt.executeQuery();
				while (rs.next()) {
					stlist.add(new Student(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4)));
				}
				
				con.close();
			} catch (SQLException | ClassNotFoundException e) {
				e.printStackTrace();
			}
			return stlist;
		}

----------------------------------------------------------------dao end---------------------------------------------------------------------------------




-------------------------------------------------------------------log in login.dart start --------------------------------------------------

import 'dart:convert';

import 'package:http/http.dart' as http;

import 'package:flutter/material.dart';
import 'package:practice_3_2/Signup.dart';

import 'FetchData.dart';

List<Student> objectsFromJson(String str) =>
    List<Student>.from(json.decode(str).map((x) => Student.fromJson(x)));

String objectsToJson(List<Student> data) =>
    json.encode(List<Student>.from(data.map((x) => x.toJson())));

class Login extends StatelessWidget {
  const Login({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Page1",
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyLoginPage(
          // title:"Flutter demo Home page",
          ),
    );
  }
}

class MyLoginPage extends StatefulWidget {
  const MyLoginPage({super.key});

  @override
  State<MyLoginPage> createState() => _MyLogInactivity();
}

class _MyLogInactivity extends State<MyLoginPage> {
  TextEditingController _id = TextEditingController();
  TextEditingController _name = TextEditingController();

  Future<Student> loginstudent() async {
    Student s = Student(
        id: int.parse(_id.text), name: _name.text, email: "", round: "");
    final response = await http.post(
        Uri.parse('http://192.168.0.116:8080/login'),
        body: jsonEncode(s.toJson()),
        headers: {
          'Content-Type': 'application/json',
        });

    if (response.statusCode == 200) {
      return Student.fromJson(jsonDecode(response.body));
    } else {
      throw Exception("error");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Log In"),
      ),
      body: Form(
        child: Padding(
          padding: EdgeInsets.all(10),
          child: ListView(
            children: <Widget>[
              Padding(
                padding: EdgeInsets.all(
                  (5),
                ),
                child: TextFormField(
                  controller: _id,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    labelText: "Id",
                  ),
                ),
              ),
              Padding(
                padding: EdgeInsets.all(
                  (5),
                ),
                child: TextFormField(
                  controller: _name,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    labelText: "name",
                  ),
                ),
              ),

              ElevatedButton(
                  onPressed: () async {
                    Student s = await loginstudent();
                    print("log in");
                    if(s != null && s.id == int.parse(_id.text) && s.name == _name.text){

                      if(s.round == "57"){
                        Navigator.push(context, MaterialPageRoute(builder: (context) => Showall() ));

                      }else if(s.round == "58"){
                        Navigator.push(context, MaterialPageRoute(builder: (context) => Signup() ));

                      }
                       // Navigator.push(context, MaterialPageRoute(builder: (context) => Showall() ));
//
                    }else{
                      ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                          content: const Text("Error")));
                    }

                    // Navigator.push(context, MaterialPageRoute(builder: (context) => Showall() ));
                    // Student st = await signupStudent();
                    // if (st != null) {
                    //   print(_id.text);
                    //   ScaffoldMessenger.of(context)
                    //       .showSnackBar(SnackBar(content: Text("Enter")));
                    //
                    //   Navigator.push(context,
                    //       MaterialPageRoute(builder: (context) => MyApp()));
                    // } else if (int.parse(_id.text) == 0) {
                    //   ScaffoldMessenger.of(context).showSnackBar(
                    //     SnackBar(
                    //       content: Text('Hello, Snackbar!'),
                    //     ),
                    //   );
                    // }
                    //
                    // if (_id.text.length == 0) {
                    //   ScaffoldMessenger.of(context).showSnackBar(
                    //     SnackBar(
                    //       content: Text('Hello, Error!'),
                    //     ),
                    //   );
                    // }
                  },
                  child: Text("Log In"))
            ],
          ),
        ),
      ),
    );
  }
}

-------------------------------------------------------------------log in login.dart end--------------------------------------------------


-----------------------------------------------------------------------login dao start--------------------------------------------
 @PostMapping(value="/login")
	  public Student signinStudent(@RequestBody Student s) {
		 StudentDAO d = new StudentDAO();
	    Student st=d.searchStudent(s.id);
	    return st;
	  }

-----------------------------------------------------------------------login dao end--------------------------------------------


--------------------------------------------------------------------login dao start -----------------------------------------------------

	  public Student insert(Student p) {
	    try {
	      Class.forName("com.mysql.cj.jdbc.Driver");
	      con = DriverManager.getConnection("jdbc:mysql://localhost:3306/flutter", "root", "root");
	      pstmt = con.prepareStatement("insert into student values(?,?,?,?)");
	      pstmt.setInt(1, p.id);
	      pstmt.setString(2, p.name);
	      pstmt.setString(3, p.email);
	      pstmt.setString(4, p.round);
	      int n = pstmt.executeUpdate();

	      con.close();
	    } catch (SQLException | ClassNotFoundException e) {
	    e.printStackTrace();
	    }
	    return p;
	  }

--------------------------------------------------------------------login dao end-----------------------------------------------------


-------------------------------------------------------------------dropdown start -----------------------------------------------------
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

// This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;
  int sum = 0;

  String? g = "";
  String? dd = "web";

  TextEditingController t1 = TextEditingController();
  TextEditingController t2 = TextEditingController();
  TextEditingController t3 = TextEditingController();

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: <Widget>[
            Padding(
              padding: EdgeInsets.all(20.0),
              child: TextField(
                controller: t1,
                decoration: const InputDecoration(
                  labelText: "1st Number",
                  hintText: "Input Number",
                  icon: Icon(Icons.edit_square),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.all(Radius.circular(10)),
                  ),
                ),
              ),
            ),

            Padding(
              padding: const EdgeInsets.all(20.0),
              child: TextField(
// obscureText: true,
                controller: t2,
                decoration: const InputDecoration(
                  labelText: "2nd Number",
                  hintText: "Input Number",
                  icon: Icon(Icons.lock),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10))),
                ),
              ),
            ),

            const SizedBox(
              height: 10,
            ),

            ElevatedButton(
              onPressed: () {
                int x = int.parse(t1.text);
                int y = int.parse(t2.text);
                if (dd == 'web') {
                  sum = x + y;
                } else if (dd == 'image') {
                  sum = x - y;
                }

// t3.text= t1.text+t2.text;
                t3.text = sum.toString();

                SnackBar s = SnackBar(
                  content: Text(sum.toString()),
                );
                ScaffoldMessenger.of(context).showSnackBar(s);
                setState(() {});
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blueAccent,
              ),
              child: Container(
                padding: const EdgeInsets.fromLTRB(0, 2, 0, 5),
                decoration: const BoxDecoration(),
                child: const Text(
                  'Submit',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                      color: Colors.white, fontWeight: FontWeight.bold),
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: Text("Result: " + sum.toString()),
            ),
            SizedBox(
              height: 10,
            ),

            Row(
              children: [
                DropdownButton(
                    value: dd,
                    items: const <DropdownMenuItem<String>>[
                      DropdownMenuItem<String>(
                        child: Text("Web"),
                        value: "web",
                      ),
                      DropdownMenuItem<String>(
                        child: Text("Image"),
                        value: "image",
                      ),
                      DropdownMenuItem<String>(
                        child: Text("News"),
                        value: "news",
                      ),
                      DropdownMenuItem<String>(
                        child: Text("Shopping"),
                        value: "shopping",
                      ),
                    ],
                    onChanged: (String? value) {
                      setState(() {
                        dd = value;
                        SnackBar s = SnackBar(content: Text(dd.toString()));

                        ScaffoldMessenger.of(context).showSnackBar(s);
                      });
                    }),
              ],
            ),

// ...Dropdwon End.......
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
 

-------------------------------------------------------------------dropdown end-----------------------------------------------------